{"version":3,"names":["_path","data","require","_gensync","_plugin","_util","_item","_configChain","_environment","_options","_files","_resolveTargets","_excluded","_objectWithoutPropertiesLoose","source","excluded","target","sourceKeys","Object","keys","key","i","length","indexOf","resolveRootMode","rootDir","rootMode","upwardRootDir","findConfigUpwards","assign","Error","ROOT_CONFIG_FILENAMES","join","code","dirname","loadPrivatePartialConfig","inputOpts","Array","isArray","args","validate","envName","getEnv","cwd","root","caller","cloneInputAst","absoluteCwd","path","resolve","absoluteRootDir","filename","undefined","showConfigPath","resolveShowConfigPath","context","showConfig","configChain","buildRootChain","merged","assumptions","options","forEach","opts","mergeOptions","targets","resolveTargets","babelrc","configFile","browserslistConfigFile","passPerPreset","plugins","map","descriptor","createItemFromDescriptor","presets","fileHandling","ignore","config","files","loadPartialConfig","gensync","showIgnoredFiles","_opts","result","item","value","Plugin","PartialConfig","filepath","exports","constructor","babelignore","freeze","hasFilesystemConfig","prototype"],"sources":["../../src/config/partial.ts"],"sourcesContent":["import path from \"path\";\nimport gensync from \"gensync\";\nimport type { Handler } from \"gensync\";\nimport Plugin from \"./plugin\";\nimport { mergeOptions } from \"./util\";\nimport { createItemFromDescriptor } from \"./item\";\nimport { buildRootChain } from \"./config-chain\";\nimport type { ConfigContext, FileHandling } from \"./config-chain\";\nimport { getEnv } from \"./helpers/environment\";\nimport { validate } from \"./validation/options\";\n\nimport type {\n  ValidatedOptions,\n  NormalizedOptions,\n  RootMode,\n} from \"./validation/options\";\n\nimport {\n  findConfigUpwards,\n  resolveShowConfigPath,\n  ROOT_CONFIG_FILENAMES,\n} from \"./files\";\nimport type { ConfigFile, IgnoreFile } from \"./files\";\nimport { resolveTargets } from \"./resolve-targets\";\n\nfunction resolveRootMode(rootDir: string, rootMode: RootMode): string {\n  switch (rootMode) {\n    case \"root\":\n      return rootDir;\n\n    case \"upward-optional\": {\n      const upwardRootDir = findConfigUpwards(rootDir);\n      return upwardRootDir === null ? rootDir : upwardRootDir;\n    }\n\n    case \"upward\": {\n      const upwardRootDir = findConfigUpwards(rootDir);\n      if (upwardRootDir !== null) return upwardRootDir;\n\n      throw Object.assign(\n        new Error(\n          `Babel was run with rootMode:\"upward\" but a root could not ` +\n            `be found when searching upward from \"${rootDir}\".\\n` +\n            `One of the following config files must be in the directory tree: ` +\n            `\"${ROOT_CONFIG_FILENAMES.join(\", \")}\".`,\n        ) as any,\n        {\n          code: \"BABEL_ROOT_NOT_FOUND\",\n          dirname: rootDir,\n        },\n      );\n    }\n    default:\n      throw new Error(`Assertion failure - unknown rootMode value.`);\n  }\n}\n\ntype PrivPartialConfig = {\n  options: NormalizedOptions;\n  context: ConfigContext;\n  fileHandling: FileHandling;\n  ignore: IgnoreFile | void;\n  babelrc: ConfigFile | void;\n  config: ConfigFile | void;\n  files: Set<string>;\n};\n\nexport default function* loadPrivatePartialConfig(\n  inputOpts: unknown,\n): Handler<PrivPartialConfig | null> {\n  if (\n    inputOpts != null &&\n    (typeof inputOpts !== \"object\" || Array.isArray(inputOpts))\n  ) {\n    throw new Error(\"Babel options must be an object, null, or undefined\");\n  }\n\n  const args = inputOpts ? validate(\"arguments\", inputOpts) : {};\n\n  const {\n    envName = getEnv(),\n    cwd = \".\",\n    root: rootDir = \".\",\n    rootMode = \"root\",\n    caller,\n    cloneInputAst = true,\n  } = args;\n  const absoluteCwd = path.resolve(cwd);\n  const absoluteRootDir = resolveRootMode(\n    path.resolve(absoluteCwd, rootDir),\n    rootMode,\n  );\n\n  const filename =\n    typeof args.filename === \"string\"\n      ? path.resolve(cwd, args.filename)\n      : undefined;\n\n  const showConfigPath = yield* resolveShowConfigPath(absoluteCwd);\n\n  const context: ConfigContext = {\n    filename,\n    cwd: absoluteCwd,\n    root: absoluteRootDir,\n    envName,\n    caller,\n    showConfig: showConfigPath === filename,\n  };\n\n  const configChain = yield* buildRootChain(args, context);\n  if (!configChain) return null;\n\n  const merged: ValidatedOptions = {\n    assumptions: {},\n  };\n  configChain.options.forEach(opts => {\n    mergeOptions(merged as any, opts);\n  });\n\n  const options: NormalizedOptions = {\n    ...merged,\n    targets: resolveTargets(merged, absoluteRootDir),\n\n    // Tack the passes onto the object itself so that, if this object is\n    // passed back to Babel a second time, it will be in the right structure\n    // to not change behavior.\n    cloneInputAst,\n    babelrc: false,\n    configFile: false,\n    browserslistConfigFile: false,\n    passPerPreset: false,\n    envName: context.envName,\n    cwd: context.cwd,\n    root: context.root,\n    rootMode: \"root\",\n    filename:\n      typeof context.filename === \"string\" ? context.filename : undefined,\n\n    plugins: configChain.plugins.map(descriptor =>\n      createItemFromDescriptor(descriptor),\n    ),\n    presets: configChain.presets.map(descriptor =>\n      createItemFromDescriptor(descriptor),\n    ),\n  };\n\n  return {\n    options,\n    context,\n    fileHandling: configChain.fileHandling,\n    ignore: configChain.ignore,\n    babelrc: configChain.babelrc,\n    config: configChain.config,\n    files: configChain.files,\n  };\n}\n\ntype LoadPartialConfigOpts = {\n  showIgnoredFiles?: boolean;\n};\n\nexport const loadPartialConfig = gensync(function* (\n  opts?: LoadPartialConfigOpts,\n): Handler<PartialConfig | null> {\n  let showIgnoredFiles = false;\n  // We only extract showIgnoredFiles if opts is an object, so that\n  // loadPrivatePartialConfig can throw the appropriate error if it's not.\n  if (typeof opts === \"object\" && opts !== null && !Array.isArray(opts)) {\n    ({ showIgnoredFiles, ...opts } = opts);\n  }\n\n  const result: PrivPartialConfig | undefined | null =\n    yield* loadPrivatePartialConfig(opts);\n  if (!result) return null;\n\n  const { options, babelrc, ignore, config, fileHandling, files } = result;\n\n  if (fileHandling === \"ignored\" && !showIgnoredFiles) {\n    return null;\n  }\n\n  (options.plugins || []).forEach(item => {\n    // @ts-expect-error todo(flow->ts): better type annotation for `item.value`\n    if (item.value instanceof Plugin) {\n      throw new Error(\n        \"Passing cached plugin instances is not supported in \" +\n          \"babel.loadPartialConfig()\",\n      );\n    }\n  });\n\n  return new PartialConfig(\n    options,\n    babelrc ? babelrc.filepath : undefined,\n    ignore ? ignore.filepath : undefined,\n    config ? config.filepath : undefined,\n    fileHandling,\n    files,\n  );\n});\n\nexport type { PartialConfig };\n\nclass PartialConfig {\n  /**\n   * These properties are public, so any changes to them should be considered\n   * a breaking change to Babel's API.\n   */\n  options: NormalizedOptions;\n  babelrc: string | void;\n  babelignore: string | void;\n  config: string | void;\n  fileHandling: FileHandling;\n  files: Set<string>;\n\n  constructor(\n    options: NormalizedOptions,\n    babelrc: string | void,\n    ignore: string | void,\n    config: string | void,\n    fileHandling: FileHandling,\n    files: Set<string>,\n  ) {\n    this.options = options;\n    this.babelignore = ignore;\n    this.babelrc = babelrc;\n    this.config = config;\n    this.fileHandling = fileHandling;\n    this.files = files;\n\n    // Freeze since this is a public API and it should be extremely obvious that\n    // reassigning properties on here does nothing.\n    Object.freeze(this);\n  }\n\n  /**\n   * Returns true if there is a config file in the filesystem for this config.\n   */\n  hasFilesystemConfig(): boolean {\n    return this.babelrc !== undefined || this.config !== undefined;\n  }\n}\nObject.freeze(PartialConfig.prototype);\n"],"mappings":";;;;;;z	        ‚  r    ¿A  Ïas	  (ˇ BEy       Ä ‚ z  ¿     ‰ z  ¿     ‰ z  ¿     ‰ z  ¿     ‚ y  @–       Ë z   ¿  Ò » z   ¿  Dq  ÿ Gâ  ê    Ä Í z  ¿     ‚  z  ¿   A  ‰ z   ¿   A  ‚ x   Ä?  Ò ‚ #z ¿    ‰#z  	¿     ‰ #z ¿    ‰#z  
¿     ƒ !v ¿     ‰ !v   ¿     ‰  
 ¿   A  ‰ ! ¿Ä    ‰ !  ¿Ä    ‰ # ¿    ƒ # ¿    ‚ z  ¿     ‚ !Ü ¿Ä    ‚ z  ¿     ‚ !Ü   ¿Ä    ‚         ‰         ∆ #ä ¿    ‰ #ä  ¿    ∆ Ç        ‰ Ç        – Ay        Ä Í &s  ˇ   &   " &s ˇ   '   b&s ˇ   $   ¢ &s	 ˇ   %   ‚ z       ‰ z       ‚  r     ¿A  ‰ r    ¿A  Ã/ as  (ˇ	   r     ¿A  ‰O r	    ¿A  Ïè as    (ˇ ¬z  ¿  Ò »z  ¿  Dq  ‚ z ¿   A  ‰ z	 ¿   A  ‰ #z  ¿    ‰è#z
  ¿ 	   ‰ #z ¿    ‰#z
 ¿ 
   ‚ Gâ      Ä Ó z   ¿     » x    Ä?  Ò ‚ !v ¿     ‰ !v

 ¿     “ Gâ  p     Ä Í  z ¿   A  ‰ !r      ‰ !r
      ‰ #r      ‰#r      ∆ r        ‚ Gy  P     Ä Ó !r      ‰ !r
      ‰ #z ¿    ‰ #z ¿    ∆ r        – r         ‰ r        ‰ r        ‰ z  ¿     ‚ My        Ä Ó Gy  ˇˇˇˇˇÉ ¿ y           ¿ y           ¿ ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ                                                NVuc   
   ∞       P      ,      `                            p                      5   !   Ä                     -   P   ∞                                                   E                             F                              H                                      `)ø˛ˇˇˇˇ                        Ä)ø˛ˇˇˇˇ                           ˇˇˇˇ   ˇ                          ˇ                               b                     Ä™™                                                     âÛˇˇˇ   ˇ   ¬&s ˇ      " &s ˇ   "   b &s ˇ   #   ¢ &s  ˇ   !   ‚ &s ˇ       " &s ˇ   &   b &s ˇ   '   b &s
 ˇ   $   b &s ˇ   %   b z       ‚ s        d  r    ¿A  ƒ/  r    ¿A  ‰O r     ¿A  ‰è r    ¿A  ‰ r    ¿A  ‰ r    ¿A  ‰ r 
    ¿A  ƒ  r    ¿A  ‚ z        ‰ as  (ˇ	   as  (ˇ " z       ‰ z       Ë as  (ˇ	 d as    (ˇ Bz  ¿     » x   Ä?  Ò ‚  z
 ¿   A  ‰è z	 ¿   A  ‰ #z
 ¿ 
   ‰#z 	¿ 	   ‰ #z
 ¿ 
   ‰#z 
¿    ‚ z	  ¿     ‚ !v

 ¿     ƒ !v ¿     ‚ x 	  Ä?  Û ‚  
 ¿   A  ‰ !
 ¿Ä    ‰ ! ¿Ä    ‚ y  @–       Ë  z	 ¿   A  ƒ  z ¿   A  ‰O # ¿    ‰# ¿    ‰ #z  ¿ 	   ‰#z   ¿    ‚ ä  ¿     ‚ !Ü

 ¿Ä    ƒ !Ü ¿Ä    ‰ #z ¿    ‰#z  ¿     ‰ #Ü
 ¿    ‰#Ü ¿    ‰ !v ¿     ƒ !v   ¿     ‚ Gô  `     Ä Ó  z ¿   A  ‰ !r        ‰ !r      ‰ #r       ‰#r      ‚ Gy  @     Ä Ó !r        ‰ !r      ƒ #z  ¿    ‰ #z ¿    – r         ‰ z  ¿     ‚ My        Ä Ó Gy  ˇˇˇˇˇÉ ¿ y           ¿ y           ¿ y           ¿ y           ¿ y           ¿ y           ¿ y           ¿ ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ                                                NVuc   
   ∞       P      ,      `                            p                      5   !   Ä                     -   P   ∞                                                   E                             F                              H                                      PÕª˛ˇˇˇˇ                        pÕª˛ˇˇˇˇ                           ˇˇˇˇ   ˇ                          ˇ                               b                     Ä™™                                                     âÛˇˇˇ   ˇ   ¬&s ˇ      " &s ˇ   #   b &s ˇ   "   ¢ &s ˇ   &   ‚ &s ˇ   '   " &s  ˇ   !   b &s ˇ       b &s
 ˇ   $   " &s ˇ   %   " z       ‰ z       ‚ s        b z        ƒ z       ‚  r    ¿A  ‰/ r    ¿A  ‰O r    ¿A  ‰è r    ¿A  ‰ r     ¿A  ‰ r    ¿A  ƒ  r 
    ¿A  ‰ as  (ˇ ¬ as  (ˇ	 "  r    ¿A  ‚ as  (ˇ j as    (ˇ Bz  ¿     ‰ z	  ¿     ‰ x   Ä?  Ò ∆  z	 ¿   A  ‰  z
 ¿   A  ‰è z	 ¿   A  ‰  z ¿   A  ‰ z ¿   A  ‰ #z  ¿    ƒ#z
 	¿ 
   ‰#z ¿ 	   ‰/ #z   ¿    ‰ #z
 
¿ 
   ‰#z ¿    ‰ #z ¿    ƒ #z  ¿     ‰ !v

 ¿     ‰ !v ¿     ‰ !v ¿     ‰ !v  ¿     ‚ Gâ  `     Ä Ó  z ¿   A  ‰ !r      ƒ !r
      ‰ #r       ‰#r   
   ‚ Gy  @     Ä Ó !r      ‰ !r
      ‰ #z  ¿    ‰ #z ¿ 
   – r        ‰ r         ‚ My        Ä Ó Gy  ˇˇˇˇˇÉ ¿ y           ¿ y           ¿ ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ                                                NVuc      ∞             ,      Ä                            ê                      5   !   †                     -   P   –    
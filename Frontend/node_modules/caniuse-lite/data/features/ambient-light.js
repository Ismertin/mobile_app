	%rd69, %rd7, %rd68;
	ld.global.u16 	%rs118, [%rd69];
	mov.u16 	%rs117, 0;

LBB0_167:
	or.pred  	%p362, %p355, %p348;
	or.pred  	%p364, %p362, %p350;
	@%p364 bra 	LBB0_169;

	mul.lo.s32 	%r352, %r69, %r109;
	mad.lo.s32 	%r353, %r70, %r110, %r352;
	mad.lo.s32 	%r354, %r76, %r111, %r353;
	mad.lo.s32 	%r355, %r75, %r112, %r354;
	mul.wide.u32 	%rd70, %r355, 2;
	add.s64 	%rd71, %rd7, %rd70;
	ld.global.u16 	%rs121, [%rd71];
	mov.u16 	%rs120, 0;

LBB0_169:
	ld.param.u64 	%rd92, [PoolingKernel_param_0];
	mov.f64 	%fd4, 0d0000000000000000;
	// begin inline asm
	{  cvt.rn.f16.f64 %rs513, %fd4;}

	// end inline asm
	setp.eq.s64 	%p365, %rd92, 0;
	@%p365 bra 	LBB0_189;

	ld.param.u64 	%rd93, [PoolingKernel_param_0];
	setp.eq.s64 	%p366, %rd93, 1;
	@%p366 bra 	LBB0_180;

	ld.param.u64 	%rd94, [PoolingKernel_param_0];
	setp.ne.s64 	%p367, %rd94, 2;
	@%p367 bra 	LBB0_199;

	setp.ne.s16 	%p368, %rs500, 0;
	mov.f64 	%fd5, 0dC0EFFC0000000000;
	// begin inline asm
	{  cvt.rn.f16.f64 %rs509, %fd5;}

	// end inline asm
	@%p368 bra 	LBB0_174;

	// begin inline asm
	{ .reg .pred __$temp3;
  setp.gt.f16  __$temp3, %rs501, %rs509;
  selp.u16 %rs374, 1, 0, __$temp3;}
	// end inline asm
	setp.eq.s16 	%p369, %rs374, 0;
	selp.b16 	%rs509, %rs509, %rs501, %p369;

LBB0_174:
	setp.ne.s16 	%p370, %rs114, 0;
	@%p370 bra 	LBB0_176;

	// begin inline asm
	{ .reg .pred __$temp3;
  setp.gt.f16  __$temp3, %rs115, %rs509;
  selp.u16 %rs377, 1, 0, __$temp3;}
	// end inline asm
	
278,%rs27,%rs27;
}
	// end inline asm
	// begin inline asm
	{add.f16 %rs481,%rs481,%rs278;
}
	// end inline asm

LBB0_122:
	setp.ne.s16 	%p292, %rs29, 0;
	@%p292 bra 	LBB0_124;

	// begin inline asm
	{mul.f16 %rs284,%rs30,%rs30;
}
	// end inline asm
	// begin inline asm
	{add.f16 %rs481,%rs481,%rs284;
}
	// end inline asm

LBB0_124:
	setp.ne.s16 	%p293, %rs32, 0;
	@%p293 bra 	LBB0_126;

	// begin inline asm
	{mul.f16 %rs290,%rs33,%rs33;
}
	// end inline asm
	// begin inline asm
	{add.f16 %rs481,%rs481,%rs290;
}
	// end inline asm

LBB0_126:
	setp.ne.s16 	%p294, %rs35, 0;
	@%p294 bra 	LBB0_128;

	// begin inline asm
	{mul.f16 %rs296,%rs36,%rs36;
}
	// end inline asm
	// begin inline asm
	{add.f16 %rs481,%rs481,%rs296;
}
	// end inline asm

LBB0_128:
	setp.ne.s16 	%p295, %rs38, 0;
	@%p295 bra 	LBB0_130;

	// begin inline asm
	{mul.f16 %rs302,%rs39,%rs39;
}
	// end inline asm
	// begin inline asm
	{add.f16 %rs481,%rs481,%rs302;
}
	// end inline asm

LBB0_130:
	setp.ne.s16 	%p296, %rs41, 0;
	@%p296 bra 	LBB0_132;

	// begin inline asm
	{mul.f16 %rs308,%rs42,%rs42;
}
	// end inline asm
	// begin inline asm
	{add.f16 %rs481,%rs481,%rs308;
}
	// end inline asm

LBB0_132:
	setp.ne.s16 	%p297, %rs44, 0;
	@%p297 bra 	LBB0_134;

	// begin inline asm
	{mul.f16 %rs314,%rs45,%rs45;
}
	// end inline asm
	// begin inline asm
	{add.f16 %rs481,%rs481,%rs314;
}
	// end inline asm

LBB0_134:
	// begin inline asm
	{.reg.b32         f;        
 
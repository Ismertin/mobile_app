generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int           @id @default(autoincrement())
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  email        String        @unique
  name         String
  password     String
  images       String[]
  exerciseLogs ExerciseLog[]
  workoutLogs  WorkoutLog[]
}

model Workout {
  id          Int          @id @default(autoincrement())
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  name        String
  workoutLogs WorkoutLog[]
  exercises   Exercise[]   @relation("ExerciseToWorkout")
}

model Exercise {
  id          Int           @id @default(autoincrement())
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  name        String
  times       Int
  iconPath    String        @map("icon_path")
  exerciseLog ExerciseLog[]
  workouts    Workout[]     @relation("ExerciseToWorkout")
}

model ExerciseLog {
  id           Int            @id @default(autoincrement())
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  isCompleted  Boolean        @default(false) @map("is_completed")
  userId       Int?           @map("user_id")
  workoutLogId Int?           @map("workout_log_id")
  exerciseId   Int?           @map("exercise_id")
  exercise     Exercise?      @relation(fields: [exerciseId], references: [id])
  user         User?          @relation(fields: [userId], references: [id])
  workoutLog   WorkoutLog?    @relation(fields: [workoutLogId], references: [id])
  times        ExerciseTime[]

  @@map("Exercise_log")
}

model ExerciseTime {
  id            Int          @id @default(autoincrement())
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt @map("updated_at")
  weight        Int          @default(0)
  repeat        Int          @default(0)
  isCompleted   Boolean      @default(false) @map("is_completed")
  exerciseLogId Int?         @map("exercise_log_id")
  exerciseLog   ExerciseLog? @relation(fields: [exerciseLogId], references: [id])

  @@map("Exercise_time")
}

model WorkoutLog {
  id           Int           @id @default(autoincrement())
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  isCompleted  Boolean       @default(false) @map("is_completed")
  userId       Int?          @map("user_id")
  workoutId    Int?          @map("workout_id")
  exerciseLogs ExerciseLog[]
  user         User?         @relation(fields: [userId], references: [id])
  workout      Workout?      @relation(fields: [workoutId], references: [id])

  @@map("Workout_log")
}
